---
- block:
    - name: "[CONTAINER] Ensure web application directory exists"
      file:
        path: /var/www/html/{{ app_name }}
        state: directory
        mode: '0755'

    - name: "[CONTAINER] Deploy web application files"
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: "{{ item.mode | default('0644') }}"
      loop:
        - { src: 'index.php.j2', dest: '/var/www/html/{{ app_name }}/index.php' }
        - { src: 'config.php.j2', dest: '/var/www/html/{{ app_name }}/config.php' }
        - { src: 'api.php.j2', dest: '/var/www/html/{{ app_name }}/api.php' }
        - { src: 'style.css.j2', dest: '/var/www/html/{{ app_name }}/style.css' }
        - { src: 'script.js.j2', dest: '/var/www/html/{{ app_name }}/script.js' }

    - name: "[CONTAINER] Deploy health endpoint"
      template:
        src: health.php.j2
        dest: /var/www/html/{{ app_name }}/health.php
        mode: '0644'

    - name: "[CONTAINER] Run Apache + PHP container"
      containers.podman.podman_container:
        name: httpd
        image: docker.io/library/php:8.2-apache
        state: started
        restart_policy: always
        ports:
          - "{{ web_port }}:80"
        volumes:
          - /var/www/html/{{ app_name }}:/var/www/html:Z
  when: use_podman_containers | default(false)

- meta: end_host
  when: use_podman_containers | default(false)

- name: Install Apache HTTPD and PHP
  dnf:
    name:
      - httpd
      - php
      - php-mysqlnd
      - php-json
      - php-mbstring
      - php-xml
      - php-gd
      - php-curl
      - mod_ssl
    state: present
    update_cache: yes

- name: Create Apache log directory
  file:
    path: /var/log/httpd
    owner: apache
    group: apache
    mode: '0755'
    state: directory

- name: Create Apache run directory
  file:
    path: /var/run/httpd
    owner: apache
    group: apache
    mode: '0755'
    state: directory

- name: Create web application directory
  file:
    path: /var/www/html/{{ app_name }}
    owner: apache
    group: apache
    mode: '0755'
    state: directory

- name: Create web application log directory
  file:
    path: /var/log/httpd/{{ app_name }}
    owner: apache
    group: apache
    mode: '0755'
    state: directory

- name: Configure Apache HTTPD
  template:
    src: httpd.conf.j2
    dest: /etc/httpd/conf.d/{{ app_name }}.conf
    owner: root
    group: root
    mode: '0644'
  notify: restart httpd

- name: Configure PHP
  template:
    src: php.ini.j2
    dest: /etc/php.ini
    owner: root
    group: root
    mode: '0644'
  notify: restart httpd

- name: Remove conflicting PHP configuration
  file:
    path: /etc/httpd/conf.d/php.conf
    state: absent
  notify: restart httpd

- name: Install and configure PHP-FPM for Fedora
  dnf:
    name: php-fpm
    state: present

- name: Configure PHP-FPM to use TCP socket
  lineinfile:
    path: /etc/php-fpm.d/www.conf
    regexp: '^listen\s*='
    line: 'listen = 127.0.0.1:9000'
    backup: yes
  notify: restart httpd

- name: Start and enable PHP-FPM
  systemd:
    name: php-fpm
    enabled: yes
    state: started

- name: Restart services to apply PHP configuration
  systemd:
    name: "{{ item }}"
    state: restarted
  loop:
    - php-fpm
    - httpd

- name: Create systemd service for web application
  template:
    src: httpd-app.service.j2
    dest: /etc/systemd/system/httpd-app.service
    owner: root
    group: root
    mode: '0644'

- name: Start and enable Apache HTTPD
  systemd:
    name: httpd
    enabled: yes
    state: started

- name: Configure SELinux for web application
  sefcontext:
    target: '{{ item }}'
    setype: httpd_sys_content_t
    state: present
  loop:
    - '/var/www/html/{{ app_name }}(/.*)?'
    - '/opt/{{ app_name }}/web(/.*)?'

- name: Apply SELinux context
  command: restorecon -Rv /var/www/html/{{ app_name }}
  when: ansible_selinux.status == "enabled"

- name: Create web application monitoring script
  template:
    src: monitor_web.sh.j2
    dest: /opt/{{ app_name }}/scripts/monitor_web.sh
    owner: root
    group: root
    mode: '0755'

- name: Create monitoring cron job
  cron:
    name: "Web Application Monitoring"
    minute: "*/5"
    job: "/opt/{{ app_name }}/scripts/monitor_web.sh"
    state: present

- name: Configure log rotation for web application
  template:
    src: logrotate.conf.j2
    dest: /etc/logrotate.d/{{ app_name }}-web
    owner: root
    group: root
    mode: '0644'

- name: Test web application
  uri:
    url: "http://localhost:{{ web_port }}/health.php"
    method: GET
    status_code: 200
  register: health_check
  retries: 3
  delay: 10
  until: health_check.status == 200 